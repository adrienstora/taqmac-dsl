/*
 * generated by Xtext 2.14.0
 */
package fr.ut2j.m1ice.pdc.taqmac.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.ut2j.m1ice.pdc.taqmac.dsl.ide.contentassist.antlr.internal.InternalTaqmacParser;
import fr.ut2j.m1ice.pdc.taqmac.dsl.services.TaqmacGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TaqmacParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TaqmacGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TaqmacGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getItineraireAccess().getGroup(), "rule__Itineraire__Group__0");
			builder.put(grammarAccess.getItineraireAccess().getGroup_7(), "rule__Itineraire__Group_7__0");
			builder.put(grammarAccess.getItineraireAccess().getGroup_10(), "rule__Itineraire__Group_10__0");
			builder.put(grammarAccess.getDestinationAccess().getGroup(), "rule__Destination__Group__0");
			builder.put(grammarAccess.getPlageHoraireAccess().getGroup(), "rule__PlageHoraire__Group__0");
			builder.put(grammarAccess.getModeTransportAccess().getGroup(), "rule__ModeTransport__Group__0");
			builder.put(grammarAccess.getModeAffichageAccess().getGroup(), "rule__ModeAffichage__Group__0");
			builder.put(grammarAccess.getItineraireAccess().getEntrepriseAssignment_2(), "rule__Itineraire__EntrepriseAssignment_2");
			builder.put(grammarAccess.getItineraireAccess().getDestinationAssignment_3(), "rule__Itineraire__DestinationAssignment_3");
			builder.put(grammarAccess.getItineraireAccess().getPlageHoraireAssignment_4(), "rule__Itineraire__PlageHoraireAssignment_4");
			builder.put(grammarAccess.getItineraireAccess().getModesTransportAssignment_6(), "rule__Itineraire__ModesTransportAssignment_6");
			builder.put(grammarAccess.getItineraireAccess().getModesTransportAssignment_7_1(), "rule__Itineraire__ModesTransportAssignment_7_1");
			builder.put(grammarAccess.getItineraireAccess().getModesAffichageAssignment_9(), "rule__Itineraire__ModesAffichageAssignment_9");
			builder.put(grammarAccess.getItineraireAccess().getModesAffichageAssignment_10_1(), "rule__Itineraire__ModesAffichageAssignment_10_1");
			builder.put(grammarAccess.getDestinationAccess().getAdresseAssignment_2(), "rule__Destination__AdresseAssignment_2");
			builder.put(grammarAccess.getPlageHoraireAccess().getDebutAssignment_3(), "rule__PlageHoraire__DebutAssignment_3");
			builder.put(grammarAccess.getPlageHoraireAccess().getFinAssignment_5(), "rule__PlageHoraire__FinAssignment_5");
			builder.put(grammarAccess.getModeTransportAccess().getTypeAssignment_1(), "rule__ModeTransport__TypeAssignment_1");
			builder.put(grammarAccess.getModeAffichageAccess().getTypeAssignment_1(), "rule__ModeAffichage__TypeAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TaqmacGrammarAccess grammarAccess;

	@Override
	protected InternalTaqmacParser createParser() {
		InternalTaqmacParser result = new InternalTaqmacParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TaqmacGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TaqmacGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
