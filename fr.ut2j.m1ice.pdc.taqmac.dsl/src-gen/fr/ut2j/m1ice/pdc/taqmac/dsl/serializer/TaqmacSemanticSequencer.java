/*
 * generated by Xtext 2.14.0
 */
package fr.ut2j.m1ice.pdc.taqmac.dsl.serializer;

import com.google.inject.Inject;
import fr.ut2j.m1ice.pdc.taqmac.dsl.services.TaqmacGrammarAccess;
import fr.ut2j.m1ice.pdc.taqmac.metamodel.itineraire.Destination;
import fr.ut2j.m1ice.pdc.taqmac.metamodel.itineraire.Itineraire;
import fr.ut2j.m1ice.pdc.taqmac.metamodel.itineraire.ItinerairePackage;
import fr.ut2j.m1ice.pdc.taqmac.metamodel.itineraire.ModeAffichage;
import fr.ut2j.m1ice.pdc.taqmac.metamodel.itineraire.ModeTransport;
import fr.ut2j.m1ice.pdc.taqmac.metamodel.itineraire.PlageHoraire;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TaqmacSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TaqmacGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ItinerairePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ItinerairePackage.DESTINATION:
				sequence_Destination(context, (Destination) semanticObject); 
				return; 
			case ItinerairePackage.ITINERAIRE:
				sequence_Itineraire(context, (Itineraire) semanticObject); 
				return; 
			case ItinerairePackage.MODE_AFFICHAGE:
				sequence_ModeAffichage(context, (ModeAffichage) semanticObject); 
				return; 
			case ItinerairePackage.MODE_TRANSPORT:
				sequence_ModeTransport(context, (ModeTransport) semanticObject); 
				return; 
			case ItinerairePackage.PLAGE_HORAIRE:
				sequence_PlageHoraire(context, (PlageHoraire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Destination returns Destination
	 *
	 * Constraint:
	 *     adresse=EString
	 */
	protected void sequence_Destination(ISerializationContext context, Destination semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ItinerairePackage.Literals.DESTINATION__ADRESSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ItinerairePackage.Literals.DESTINATION__ADRESSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDestinationAccess().getAdresseEStringParserRuleCall_2_0(), semanticObject.getAdresse());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Itineraire returns Itineraire
	 *
	 * Constraint:
	 *     (
	 *         entreprise=EString 
	 *         destination=Destination 
	 *         plageHoraire=PlageHoraire 
	 *         modesTransport+=ModeTransport 
	 *         modesTransport+=ModeTransport* 
	 *         modesAffichage+=ModeAffichage 
	 *         modesAffichage+=ModeAffichage*
	 *     )
	 */
	protected void sequence_Itineraire(ISerializationContext context, Itineraire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModeAffichage returns ModeAffichage
	 *
	 * Constraint:
	 *     type=typeAffichage
	 */
	protected void sequence_ModeAffichage(ISerializationContext context, ModeAffichage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ItinerairePackage.Literals.MODE_AFFICHAGE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ItinerairePackage.Literals.MODE_AFFICHAGE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModeAffichageAccess().getTypeTypeAffichageTerminalRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModeTransport returns ModeTransport
	 *
	 * Constraint:
	 *     type=typeTransport
	 */
	protected void sequence_ModeTransport(ISerializationContext context, ModeTransport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ItinerairePackage.Literals.MODE_TRANSPORT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ItinerairePackage.Literals.MODE_TRANSPORT__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModeTransportAccess().getTypeTypeTransportTerminalRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PlageHoraire returns PlageHoraire
	 *
	 * Constraint:
	 *     (debut=EString fin=EString)
	 */
	protected void sequence_PlageHoraire(ISerializationContext context, PlageHoraire semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ItinerairePackage.Literals.PLAGE_HORAIRE__DEBUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ItinerairePackage.Literals.PLAGE_HORAIRE__DEBUT));
			if (transientValues.isValueTransient(semanticObject, ItinerairePackage.Literals.PLAGE_HORAIRE__FIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ItinerairePackage.Literals.PLAGE_HORAIRE__FIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlageHoraireAccess().getDebutEStringParserRuleCall_3_0(), semanticObject.getDebut());
		feeder.accept(grammarAccess.getPlageHoraireAccess().getFinEStringParserRuleCall_5_0(), semanticObject.getFin());
		feeder.finish();
	}
	
	
}
